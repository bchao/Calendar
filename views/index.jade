extends layout

block content
  div(ng-app="calendarApp")
    if (user)
      p You are currently logged in as #{user.name}
    else
      p You are currently not logged in. Plaese login or register...
    br

    link(rel='stylesheet', href='/css/calendar.min.css')
    link(rel='stylesheet', href='/css/angular-csp.css')

    br
    .page-header
      .pull-right.form-inline
        .btn-group
          button.btn.btn-primary(onclick="navigate('prev');") << Prev
          button.btn(onclick="navigate('today');") Today
          button.btn.btn-primary(onclick="navigate('next');") Next >>
        .btn-group#viewLengthButtons
          button.btn.btn-warning(calendarView="year", onclick="setViewLength('year');") Year
          button.btn.btn-warning.active(calendarView="month", onclick="setViewLength('month');") Month
          button.btn.btn-warning(calendarView="week", onclick="setViewLength('week');") Week
          button.btn.btn-warning(calendarView="day", onclick="setViewLength('day');") Day
      h3
      br
    .row
      .span9
        #calendar
      //
      .span3
        #sideBar(ng-controller="sideBarController")
          .btn-group
            button.btn.btn-primary(ng-click="displayUserGroups()") User Groups
            button.btn.btn-primary(ng-click="displayUserInfo()") User Debug
          h3 {{ title }}
          #userGroupWindow(ng-hide="selector != 0")
            ul
              li(ng-repeat="group in userGroups")
                [<a href ng-click="displayUserGroup(group.name)">group.name</a>]
          #userListWindow(ng-hide="selector != 1")
            ul
              li(ng-repeat="user in group")
                user.name
          #calendarInfo(ng-hide="selector != 2")
            {{ text }}
    //
    br
    .span9
      #bottomBar(ng-controller="bottomAreaController")
        #displayEvent(ng-hide="selector != 0")
        #createEvent(ng-hide="selector != 1")
          form(name="eventForm")
            |Event Name
            br
            input(type="text", ng-model="selectedEvent.name", required)
            br
            |Description
            br
            textarea(rows="10", cols="50", ng-model="selectedEvent.description", required)
            br
            |Location
            br
            input(type="text", ng-model="selectedEvent.location", required)
            br
            |Start Time
            br
            input(type="datetime-local", ng-model="calendar.start", placeholder="yyyy-MM-ddTHH:mm", min="2015-01-01T00:00" max="2050-12-31T00:00", required)
            br
            |End Time
            br
            input(type="datetime-local", ng-model="calendar.end", placeholder="yyyy-MM-ddTHH:mm", min="2015-01-01T00:00" max="2050-12-31T00:00", required)
            br
            |Containing Calendar
            br
            select(ng-model="selectedEvent.calendar", ng-options="calendar.name for calendar in calendars", required)
            br
            btn.btn.btn-primary(ng-disabled="{{ eventForm.$invalid }}", ng-click="sendEventData(selectedEvent)") Save
            br
          br
          {{ text }}
    script(type='text/javascript', src='/js/underscore-min.js')
    script(type='text/javascript', src='/js/calendar.min.js')
    script(type='text/javascript', src='/js/angular.js')
    script(type='text/javascript').
      var calendar = $("#calendar").calendar(
      {
        view: "month",
        tmpl_path: "/tmpls/",
        events_source: function () { return [
          {
            "id": 293,
            "title": "Event 1",
            "url": "javascript:void(0)",
            "class": "event-important",
            "start": 1422424903780, // Milliseconds
            "end": 1422434903780 // Milliseconds
          }
          ];},
        onAfterViewLoad: function(view) {
          $('.btn-group button').removeClass('active');
          $('button[calendarView="' + view + '"]').addClass('active');
          $('.page-header h3').text(this.getTitle());

          $('a[data-event-id]').click(function() {
            $('#eventFrame').text($(this).attr('data-event-id'));
          });
        }
      });
      function setViewLength(viewLength) {
        calendar.view(viewLength);
      }
      function navigate(where) {
        calendar.navigate(where);
      }

      //Angular code
      var app = angular.module('calendarApp', []);
      app.run(function($rootScope, $http) {
        $rootScope.things="text";
      });
      app.controller('sideBarController', function($scope, $http) {
        $scope.title = 'Select an Option';
        $scope.text = 'N/A';
        $scope.selector = -1;

        $scope.displayUserGroups = function() {
          $scope.title = 'User Groups';
          $scope.text = 'N/A';
          $scope.selector = 0;

          $http.get('/usergroup').
          success(function(data, status, headers, config) {
            $scope.text = angular.fromJson(data);
            //Parse the object into a set of groups filled with users
          }).
          error(function(data, status, headers, config) {
            // called asynchronously if an error occurs
            // or server returns response with an error status.
          });
        }

        $scope.displayCalendarInfo = function() {
          $scope.title = 'Calendar Information';
          $scope.text = 'N/A';
          $scope.selector = 2;

          $http.get('/calendars').
          success(function(data, status, headers, config) {
            $scope.text = angular.fromJson(data);
            //Parse the object into a set of groups filled with users
          }).
          error(function(data, status, headers, config) {
            // called asynchronously if an error occurs
            // or server returns response with an error status.
          });
        }
      });
      app.controller('bottomAreaController', function($scope, $http) {
        $scope.title = '';
        $scope.text = 'FFFAAAAACKING';
        $scope.selector = 1;

        $scope.sendEventData = function(postData) {
          $http.post('/events', postData).
          success(function(data, status, headers, config) {
            $scope.text = angular.fromJson(data);
            //Parse the object into a set of groups filled with users
          }).
          error(function(data, status, headers, config) {
            // called asynchronously if an error occurs
            // or server returns response with an error status.
          });
        }
      });
